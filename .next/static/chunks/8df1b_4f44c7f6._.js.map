{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/@noble/curves/esm/utils.js","sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/version.js","sourceRoot":"","sources":["../../core/version.ts"],"sourcesContent":[],"names":[],"mappings":"AAAA,cAAA,EAAgB;;;AACT,MAAM,OAAO,GAAG,OAAO,CAAA","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/internal/errors.js","sourceRoot":"","sources":["../../../core/internal/errors.ts"],"sourcesContent":[],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;;AAGjC,SAAU,MAAM,CAAC,GAAW;IAChC,OAAO,GAAG,CAAA;AACZ,CAAC;AAGK,SAAU,UAAU;IACxB,gLAAO,UAAO,CAAA;AAChB,CAAC;AAGK,SAAU,WAAW,CAAC,IAAa;IACvC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAA;IACpB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CACjC,GAAG,CAAC;YAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACpB,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,KAAK,EAAE,OAAO,IAAI,CAAA;QACvD,OAAO;YAAC,GAAG;YAAE,KAAK;SAAC,CAAA;IACrB,CAAC,CAAC,CACD,MAAM,CAAC,OAAO,CAAuB,CAAA;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG;YAAE,CAAC,GAAG,CAAC,EAAE,EAAE;eAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC;OAAE,CAAC,CAAC,CAAA;IAC9E,OAAO,OAAO,CACX,GAAG,CAAC;YAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;eAAC,YAAK,GAAM,OAAH,GAAG,EAAA,EAAG,GAAC,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC,EAAA,MAAU,CAAE,CAAC,KAAR,KAAK;OACpE,IAAI,CAAC,IAAI,CAAC,CAAA;AACf,CAAC","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Errors.js","sourceRoot":"","sources":["../../core/Errors.ts"],"sourcesContent":[],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Json.js","sourceRoot":"","sources":["../../core/Json.ts"],"sourcesContent":[],"names":[],"mappings":";;;;AAEA,MAAM,YAAY,GAAG,WAAW,CAAA;AAoB1B,SAAU,KAAK,CACnB,MAAc,EACd,OAAmE;IAEnE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;QACxC,MAAM,KAAK,GAAG,MAAM,CAAA;QACpB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,EAC3D,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAA;QACrD,OAAO,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;IACpE,CAAC,CAAC,CAAA;AACJ,CAAC;AAyBK,SAAU,SAAS,CACvB,KAAU,EACV,QAA2E,EAC3E,KAAmC;IAEnC,OAAO,IAAI,CAAC,SAAS,CACnB,KAAK,EACL,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QACb,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;QAC/D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,OAAO,KAAK,CAAC,QAAQ,EAAE,GAAG,YAAY,CAAA;QACrE,OAAO,KAAK,CAAA;IACd,CAAC,EACD,KAAK,CACN,CAAA;AACH,CAAC","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/internal/bytes.js","sourceRoot":"","sources":["../../../core/internal/bytes.ts"],"sourcesContent":[],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/internal/hex.js","sourceRoot":"","sources":["../../../core/internal/hex.ts"],"sourcesContent":[],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Bytes.js","sourceRoot":"","sources":["../../core/Bytes.ts"],"sourcesContent":[],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 822, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Hex.js","sourceRoot":"","sources":["../../core/Hex.ts"],"sourcesContent":[],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1140, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Withdrawal.js","sourceRoot":"","sources":["../../core/Withdrawal.ts"],"sourcesContent":[],"names":[],"mappings":";;;;AACA,OAAO,KAAK,GAAG,MAAM,UAAU,CAAA;;AAqCzB,SAAU,OAAO,CAAC,UAAe;IACrC,OAAO;QACL,GAAG,UAAU;QACb,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QACjC,KAAK,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;QAC/B,cAAc,EAAE,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC;KAClD,CAAA;AACH,CAAC;AA8BK,SAAU,KAAK,CAAC,UAAsB;IAC1C,OAAO;QACL,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,MAAM,uKAAE,GAAG,CAAC,SAAU,CAAC,UAAU,CAAC,MAAM,CAAC;QACzC,KAAK,uKAAE,GAAG,CAAC,SAAU,CAAC,UAAU,CAAC,KAAK,CAAC;QACvC,cAAc,uKAAE,GAAG,CAAC,SAAU,CAAC,UAAU,CAAC,cAAc,CAAC;KAC1D,CAAA;AACH,CAAC","debugId":null}},
    {"offset": {"line": 1166, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/BlockOverrides.js","sourceRoot":"","sources":["../../core/BlockOverrides.ts"],"sourcesContent":[],"names":[],"mappings":";;;;AACA,OAAO,KAAK,GAAG,MAAM,UAAU,CAAA;AAC/B,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAA;;;AA0DvC,SAAU,OAAO,CAAC,iBAAsB;IAC5C,OAAO;QACL,GAAG,AAAC,iBAAiB,CAAC,aAAa,IAAI;YACrC,aAAa,EAAE,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC;SACvD,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,WAAW,IAAI;YACnC,WAAW,EAAE,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC;SACnD,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,YAAY,IAAI;YACpC,YAAY,EAAE,iBAAiB,CAAC,YAAY;SAC7C,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,QAAQ,IAAI;YAChC,QAAQ,EAAE,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC;SAC7C,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,MAAM,IAAI;YAC9B,MAAM,EAAE,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC;SACzC,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,UAAU,IAAI;YAClC,UAAU,EAAE,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC;SACjD,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,IAAI,IAAI;YAC5B,IAAI,EAAE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;SACrC,CAAC;QACF,GAAG,AAAC,iBAAiB,CAAC,WAAW,IAAI;YACnC,WAAW,EAAE,iBAAiB,CAAC,WAAW,CAAC,GAAG,6KAAC,UAAU,AAAQ,CAAP,AAAQ;SACnE,CAAC;KACH,CAAA;AACH,CAAC;AA+BK,SAAU,KAAK,CAAC,cAA8B;IAClD,OAAO;QACL,GAAI,AAAD,OAAQ,cAAc,CAAC,aAAa,KAAK,QAAQ,IAAI;YACtD,aAAa,uKAAE,GAAG,CAAC,SAAU,CAAC,cAAc,CAAC,aAAa,CAAC;SAC5D,CAAC;QACF,GAAG,AAAC,OAAO,cAAc,CAAC,WAAW,KAAK,QAAQ,IAAI;YACpD,WAAW,uKAAE,GAAG,CAAC,SAAU,CAAC,cAAc,CAAC,WAAW,CAAC;SACxD,CAAC;QACF,GAAG,AAAC,OAAO,cAAc,CAAC,YAAY,KAAK,QAAQ,IAAI;YACrD,YAAY,EAAE,cAAc,CAAC,YAAY;SAC1C,CAAC;QACF,GAAG,AAAC,OAAO,cAAc,CAAC,QAAQ,KAAK,QAAQ,IAAI;YACjD,QAAQ,uKAAE,GAAG,CAAC,SAAU,CAAC,cAAc,CAAC,QAAQ,CAAC;SAClD,CAAC;QACF,GAAI,AAAD,OAAQ,cAAc,CAAC,MAAM,KAAK,QAAQ,IAAI;YAC/C,MAAM,uKAAE,GAAG,CAAC,SAAU,CAAC,cAAc,CAAC,MAAM,CAAC;SAC9C,CAAC;QACF,GAAG,AAAC,OAAO,cAAc,CAAC,UAAU,KAAK,QAAQ,IAAI;YACnD,UAAU,uKAAE,GAAG,CAAC,SAAU,CAAC,cAAc,CAAC,UAAU,CAAC;SACtD,CAAC;QACF,GAAG,AAAC,OAAO,cAAc,CAAC,IAAI,KAAK,QAAQ,IAAI;YAC7C,IAAI,uKAAE,GAAG,CAAC,SAAU,CAAC,cAAc,CAAC,IAAI,CAAC;SAC1C,CAAC;QACF,GAAG,AAAC,cAAc,CAAC,WAAW,IAAI;YAChC,WAAW,EAAE,cAAc,CAAC,WAAW,CAAC,GAAG,6KAAC,QAAgB,CAAC,CAAP,CAAC;SACxD,CAAC;KACH,CAAA;AACH,CAAC","debugId":null}},
    {"offset": {"line": 1234, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Hash.js","sourceRoot":"","sources":["../../core/Hash.ts"],"sourcesContent":[],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,MAAM,yBAAyB,CAAA;AACtE,OAAO,EAAE,UAAU,IAAI,eAAe,EAAE,MAAM,oBAAoB,CAAA;AAClE,OAAO,EAAE,MAAM,IAAI,YAAY,EAAE,MAAM,sBAAsB,CAAA;AAC7D,OAAO,KAAK,KAAK,MAAM,YAAY,CAAA;AAEnC,OAAO,KAAK,GAAG,MAAM,UAAU,CAAA;;;;;;AAuCzB,SAAU,SAAS,CAMvB,KAAoC;kBACpC,iEAAiC,CAAA,CAAE;IAEnC,MAAM,EAAE,EAAE,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,OAAO,CAAA;IACpE,MAAM,KAAK,2JAAG,aAAA,AAAe,yKAAC,KAAK,CAAC,CAAI,CAAC,KAAK,CAAC,CAAC,CAAA;IAChD,IAAI,EAAE,KAAK,OAAO,EAAE,OAAO,KAAc,CAAA;IACzC,OAAO,GAAG,CAAC,6KAAS,CAAC,KAAK,CAAU,CAAA;AACtC,CAAC;AAmCK,SAAU,SAAS,CAMvB,KAAoC;kBACpC,iEAAiC,CAAA,CAAE;IAEnC,MAAM,EAAE,EAAE,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,OAAO,CAAA;IACpE,MAAM,KAAK,gKAAG,YAAA,AAAe,yKAAC,KAAK,CAAC,CAAI,CAAC,KAAK,CAAC,CAAC,CAAA;IAChD,IAAI,EAAE,KAAK,OAAO,EAAE,OAAO,KAAc,CAAA;IACzC,4KAAO,GAAG,CAAC,QAAS,CAAC,KAAK,CAAU,CAAA;AACtC,CAAC;AAmCK,SAAU,MAAM,CAMpB,KAAoC;kBACpC,iEAA8B,CAAA,CAAE;IAEhC,MAAM,EAAE,EAAE,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,OAAO,CAAA;IACpE,MAAM,KAAK,6JAAG,SAAA,AAAY,wKAAC,KAAK,CAAC,EAAI,CAAC,KAAK,CAAC,CAAC,CAAA;IAC7C,IAAI,EAAE,KAAK,OAAO,EAAE,OAAO,KAAc,CAAA;IACzC,4KAAO,GAAG,CAAC,QAAS,CAAC,KAAK,CAAU,CAAA;AACtC,CAAC;AAmCK,SAAU,QAAQ,CAAC,KAAa;IACpC,4KAAO,GAAG,CAAC,OAAQ,CAAC,KAAK,CAAC,yKAAI,GAAG,CAAC,GAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;AACtD,CAAC","debugId":null}},
    {"offset": {"line": 1286, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/internal/ens.js","sourceRoot":"","sources":["../../../core/internal/ens.ts"],"sourcesContent":[],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAA;AACtC,OAAO,KAAK,GAAG,MAAM,WAAW,CAAA;AAEhC,OAAO,KAAK,GAAG,MAAM,WAAW,CAAA;;;;AAM1B,SAAU,aAAa,CAAC,MAAc;IAC1C,iCAAiC;IACjC,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAA;IAC7C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;IAEhD,MAAM,KAAK,GAAG,IAAI,UAAU,yMAAC,QAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;IAEpE,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC7B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE,CAAC;QACrC,IAAI,OAAO,2MAAG,QAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,CAAA;QACxC,mEAAmE;QACnE,iDAAiD;QACjD,IAAI,OAAO,CAAC,UAAU,GAAG,GAAG,EAC1B,OAAO,2MAAG,QAAK,CAAC,UAAU,CAAC,aAAa,sKAAC,GAAG,CAAC,QAAS,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAA;QACpE,KAAK,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAA;QAC9B,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,GAAG,CAAC,CAAC,CAAA;QAC9B,MAAM,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;IAC9B,CAAC;IAED,IAAI,KAAK,CAAC,UAAU,KAAK,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAA;IAEtE,OAAO,KAAK,CAAA;AACd,CAAC;AAWK,SAAU,aAAa,CAAC,IAAa;IACzC,OAAO,IAAiB,OAAb,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAA,EAAG,CAAA;AAC7B,CAAC;AAOK,SAAU,eAAe,CAAC,KAAa;IAC3C,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE,OAAO,IAAI,CAAA;IACpC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAA;IACzC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,OAAO,IAAI,CAAA;IAC1C,MAAM,IAAI,GAAG,KAAuB,CAAE,CAAA,KAApB,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACpC,IAAI,sKAAC,GAAG,CAAC,OAAQ,CAAC,IAAI,EAAE;QAAE,MAAM,EAAE,IAAI;IAAA,CAAE,CAAC,EAAE,OAAO,IAAI,CAAA;IACtD,OAAO,IAAI,CAAA;AACb,CAAC","debugId":null}},
    {"offset": {"line": 1333, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/viem/node_modules/ox/_esm/core/Ens.js","sourceRoot":"","sources":["../../core/Ens.ts"],"sourcesContent":[],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,KAAK,KAAK,MAAM,YAAY,CAAA;AAEnC,OAAO,KAAK,IAAI,MAAM,WAAW,CAAA;AACjC,OAAO,KAAK,GAAG,MAAM,UAAU,CAAA;AAC/B,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAA;;;;;;AAiBvC,SAAU,SAAS,CAAC,KAAa;IACrC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACzC,IAAI,CAAC,KAAK,EAAE,4KAAO,GAAG,CAAC,QAAS,CAAC,MAAM,CAAC,CAAA;IACxC,OAAO,iLACL,QAAQ,CAAC,SAAe,CAAC,KAAK,CAAC,0KAAI,IAAI,CAAC,OAAS,sKAAC,GAAG,CAAC,SAAU,CAAC,KAAK,CAAC,CAAC,CACzE,CAAA;AACH,CAAC;AA0BK,SAAU,QAAQ,CAAC,IAAY;IACnC,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACvC,IAAI,CAAC,IAAI,EAAE,4KAAO,GAAG,CAAC,QAAS,CAAC,MAAM,CAAC,CAAA;IAEvC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC9B,4CAA4C;IAC5C,IAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAE,CAAC;QAC/C,MAAM,oBAAoB,GAAG,QAAQ,CAAC,0LAAe,CAAC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAA;QACjE,MAAM,MAAM,GAAG,oBAAoB,0KAC/B,KAAK,CAAC,IAAO,CAAC,oBAAoB,CAAC,GACnC,IAAI,CAAC,6KAAS,wKAAC,KAAK,CAAC,OAAU,CAAC,MAAM,CAAC,CAAC,CAAE,CAAC,EAAE;YAAE,EAAE,EAAE,OAAO;QAAA,CAAE,CAAC,CAAA;QACjE,MAAM,yKAAG,IAAI,CAAC,OAAS,CAAC,KAAK,CAAC,0KAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAAE,EAAE,EAAE,OAAO;QAAA,CAAE,CAAC,CAAA;IACxE,CAAC;IAED,4KAAO,GAAG,CAAC,QAAS,CAAC,MAAM,CAAC,CAAA;AAC9B,CAAC;AA4BK,SAAU,SAAS,CAAC,IAAY;IACpC,sMAAO,gBAAA,AAAa,EAAC,IAAI,CAAC,CAAA;AAC5B,CAAC","debugId":null}},
    {"offset": {"line": 1376, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Red/Documents/GitHub/375-arcade-test/node_modules/viem/node_modules/%40adraffy/ens-normalize/dist/index.mjs"],"sourcesContent":["// created 2024-09-13T06:42:45.675Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0ca3917bee1eee342d64c631cb1dbaac37b167d848887d59f6d68328dc99ac09\nvar COMPRESSED$1 = '';\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\r\n\r\nfunction array_replace(v, a, b) {\r\n\tlet prev = 0;\r\n\twhile (true) {\r\n\t\tlet next = v.indexOf(a, prev);\r\n\t\tif (next < 0) break;\r\n\t\tv[next] = b; \r\n\t\tprev = next + 1;\r\n\t}\r\n}\n\n// created 2024-09-13T06:42:45.675Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a79d5f9b1879a7b416aa659f4a3d788f80a8cf5f0ab955a456592c02f556a28c\nvar COMPRESSED = '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';\n\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\n// export function nf_deinit() {\r\n// \tif (!SHIFTED_RANK) return;\r\n// \tSHIFTED_RANK = EXCLUSIONS = DECOMP = RECOMP = undefined;\r\n// }\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\nconst HYPHEN = 0x2D;\r\nconst STOP = 0x2E;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\n// export function ens_deinit() {\r\n// \tnf_deinit();\r\n// \tif (!MAPPED) return;\r\n// \tMAPPED = IGNORED = CM = NSM = ESCAPE = NFC_CHECK = GROUPS = WHOLE_VALID = WHOLE_MAP = VALID = EMOJI_LIST = EMOJI_ROOT = undefined;\r\n// }\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\tconst set_add_many = (set, v) => v.forEach(x => set.add(x));\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tNFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\t//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tconst read_chunked = () => {\r\n\t\t// 20230921: build set in parts, 2x faster\r\n\t\tlet set = new Set();\r\n\t\tread_sorted_array().forEach(i => set_add_many(set, chunks[i]));\r\n\t\tset_add_many(set, read_sorted_array());\r\n\t\treturn set; \r\n\t};\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // unrestricted then restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\t// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tset_add_many(rec.G, gs);\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement); // this is the same reference\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\t// 20230924: VALID was union but can be re-used\r\n\tVALID = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of VALID) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\t// add all decomposed parts\r\n\t// see derive: \"Valid is Closed (via Brute-force)\"\r\n\tset_add_many(VALID, nfd(VALID));\r\n\t\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`); // this can only be ascii so cant be bidi\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// if cps exceed max, middle truncate with ellipsis\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tif (cps.length > max) {\r\n\t\tmax >>= 1;\r\n\t\tcps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];\r\n\t}\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp, only_nsm) { // 20240127: add extra argument\r\n\tinit();\r\n\treturn only_nsm ? NSM.has(cp) : CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\tinit();\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tinit();\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tinit();\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI,\r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten,\r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\n\nexport { ens_beautify, ens_emoji, ens_normalize, ens_normalize_fragment, ens_split, ens_tokenize, is_combining_mark, nfc, nfd, safe_str_from_cps, should_escape };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}
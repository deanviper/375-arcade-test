{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Red/Documents/GitHub/375-arcade-test/app/api/leaderboard/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function GET() {\r\n  try {\r\n    console.log('=== LEADERBOARD REQUEST START ===');\r\n\r\n    const query = `\r\n      query GetArcadeScores {\r\n        transactions(\r\n          tags: [\r\n            { name: \"Application\", values: [\"Tetris-Leaderboard\", \"Pacman-Leaderboard\"] },\r\n            { name: \"Type\", values: [\"Score\"] }\r\n          ]\r\n          order: DESC\r\n          first: 500\r\n        ) {\r\n          edges {\r\n            node {\r\n              id\r\n              timestamp\r\n              tags { name value }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    let allScores: any[] = [];\r\n\r\n    const graphqlEndpoints = [\r\n      'https://devnet.irys.xyz/graphql',\r\n      'https://gateway.irys.xyz/graphql',\r\n      'https://arweave.net/graphql'\r\n    ];\r\n\r\n    for (const endpoint of graphqlEndpoints) {\r\n      try {\r\n        const res = await fetch(endpoint, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ query }),\r\n          signal: AbortSignal.timeout(10000)\r\n        });\r\n        if (!res.ok) {\r\n          console.log(endpoint, 'non-200', res.status);\r\n          continue;\r\n        }\r\n        const result = await res.json();\r\n        if (result.errors) {\r\n          console.log('errors', result.errors);\r\n          continue;\r\n        }\r\n        const edges = result.data?.transactions?.edges || [];\r\n        for (const e of edges) {\r\n          const node = e.node;\r\n          const tags = node.tags || [];\r\n          const tagMap: Record<string, string> = {};\r\n          tags.forEach((t: any) => { tagMap[t.name] = t.value; });\r\n\r\n          const rawApp = (tagMap.Application || '').toLowerCase();\r\n          const gameType = rawApp.includes('pacman') ? 'pacman' : 'tetris';\r\n\r\n          const score = parseInt(tagMap.Score || '0');\r\n          const lines = parseInt(tagMap.Lines || '0');\r\n          const level = parseInt(tagMap.Level || '1');\r\n          const player = tagMap.Player || '';\r\n          const timestamp = parseInt(tagMap.Timestamp || node.timestamp);\r\n\r\n          if (score > 0 && player) {\r\n            allScores.push({\r\n              txId: node.id,\r\n              walletAddress: player,\r\n              score,\r\n              lines,\r\n              level,\r\n              timestamp,\r\n              gameType,\r\n              source: 'Irys'\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      } catch (err:any) {\r\n        console.log('endpoint fail', endpoint, err.message);\r\n      }\r\n    }\r\n\r\n    if (allScores.length === 0) {\r\n      console.log('GraphQL failed, try known direct (fallback)');\r\n      const knownTxIds: string[] = [];\r\n      for (const txId of knownTxIds) {\r\n        try {\r\n          const r = await fetch(`https://gateway.irys.xyz/${txId}`);\r\n          if (r.ok) {\r\n            const body = await r.json();\r\n            if (body.score && body.walletAddress) {\r\n              allScores.push({\r\n                txId,\r\n                walletAddress: body.walletAddress,\r\n                score: body.score,\r\n                lines: body.lines || 0,\r\n                level: body.level || 1,\r\n                timestamp: body.timestamp,\r\n                gameType: body.gameType || 'tetris',\r\n                source: 'Direct'\r\n              });\r\n            }\r\n          }\r\n        } catch {}\r\n      }\r\n    }\r\n\r\n    const getHighestScorePerWallet = (scores: any[], gameType: string) => {\r\n      const map = new Map<string, any>();\r\n      scores.filter(s => s.gameType === gameType).forEach(s => {\r\n        const w = s.walletAddress.toLowerCase();\r\n        const ex = map.get(w);\r\n        if (!ex || s.score > ex.score) map.set(w, s);\r\n      });\r\n      return Array.from(map.values()).sort((a,b)=>b.score-a.score);\r\n    };\r\n\r\n    const tetrisScores = getHighestScorePerWallet(allScores, 'tetris').slice(0,50);\r\n    const pacmanScores = getHighestScorePerWallet(allScores, 'pacman').slice(0,50);\r\n\r\n    const allWalletScores = new Map<string, any>();\r\n    allScores.forEach(s => {\r\n      const w = s.walletAddress.toLowerCase();\r\n      const ex = allWalletScores.get(w);\r\n      if (!ex || s.score > ex.score) allWalletScores.set(w, s);\r\n    });\r\n\r\n    const combinedLeaderboard = Array.from(allWalletScores.values())\r\n      .sort((a,b)=>b.score-a.score).slice(0,50).map((entry, i) => ({\r\n        rank: i+1,\r\n        txId: entry.txId,\r\n        displayAddress: `${entry.walletAddress.slice(0,6)}...${entry.walletAddress.slice(-4)}`,\r\n        walletAddress: entry.walletAddress,\r\n        score: entry.score,\r\n        lines: entry.lines,\r\n        level: entry.level,\r\n        timestamp: entry.timestamp,\r\n        gameType: entry.gameType,\r\n        source: entry.source\r\n      }));\r\n\r\n    const tetrisLeaderboard = tetrisScores.map((e,i)=>({\r\n      rank: i+1,\r\n      txId: e.txId,\r\n      displayAddress: `${e.walletAddress.slice(0,6)}...${e.walletAddress.slice(-4)}`,\r\n      walletAddress: e.walletAddress,\r\n      score: e.score,\r\n      lines: e.lines,\r\n      level: e.level,\r\n      timestamp: e.timestamp,\r\n      gameType: 'tetris',\r\n      source: e.source\r\n    }));\r\n\r\n    const pacmanLeaderboard = pacmanScores.map((e,i)=>({\r\n      rank: i+1,\r\n      txId: e.txId,\r\n      displayAddress: `${e.walletAddress.slice(0,6)}...${e.walletAddress.slice(-4)}`,\r\n      walletAddress: e.walletAddress,\r\n      score: e.score,\r\n      lines: e.lines,\r\n      level: e.level,\r\n      timestamp: e.timestamp,\r\n      gameType: 'pacman',\r\n      source: e.source\r\n    }));\r\n\r\n    const response = {\r\n      success: true,\r\n      leaderboard: combinedLeaderboard,\r\n      tetris: tetrisLeaderboard,\r\n      pacman: pacmanLeaderboard,\r\n      combined: combinedLeaderboard,\r\n      totals: {\r\n        all: combinedLeaderboard.length,\r\n        tetris: tetrisLeaderboard.length,\r\n        pacman: pacmanLeaderboard.length\r\n      },\r\n      sources: {\r\n        irys: allScores.filter(s => s.source === 'Irys').length,\r\n        direct: allScores.filter(s => s.source === 'Direct').length\r\n      }\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (err:any) {\r\n    console.error('=== LEADERBOARD ERROR ===', err);\r\n    return NextResponse.json({\r\n      success:false,\r\n      leaderboard:[],\r\n      tetris:[],\r\n      pacman:[],\r\n      combined:[],\r\n      totals:{all:0,tetris:0,pacman:0},\r\n      sources:{irys:0,direct:0},\r\n      error:err.message\r\n    }, { status:500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}
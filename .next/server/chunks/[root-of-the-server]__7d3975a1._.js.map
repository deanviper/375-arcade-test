{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Red/Documents/GitHub/375-arcade-test/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { Uploader } from \"@irys/upload\";\r\nimport { Ethereum } from \"@irys/upload-ethereum\";\r\nimport { ethers } from 'ethers';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  console.log('=== IRYS DEVNET UPLOAD ROUTE ===');\r\n  \r\n  try {\r\n    const body = await req.json();\r\n    console.log('Request body:', body);\r\n    \r\n    const { data, tags, signature, message } = body;\r\n    \r\n    if (!data) {\r\n      throw new Error('No data provided');\r\n    }\r\n    \r\n    if (!signature || !message) {\r\n      throw new Error('User signature required');\r\n    }\r\n    \r\n    // Verify the signature matches the data\r\n    try {\r\n      const recoveredAddress = ethers.verifyMessage(message, signature);\r\n      console.log('Signature verified for address:', recoveredAddress);\r\n      console.log('Data wallet address:', data.walletAddress);\r\n      \r\n      if (recoveredAddress.toLowerCase() !== data.walletAddress.toLowerCase()) {\r\n        throw new Error('Signature verification failed - address mismatch');\r\n      }\r\n    } catch (verifyError: any) {\r\n      console.error('Signature verification failed:', verifyError);\r\n      throw new Error('Invalid signature');\r\n    }\r\n    \r\n    if (!process.env.IRYS_PRIVATE_KEY) {\r\n      throw new Error('IRYS_PRIVATE_KEY is not set');\r\n    }\r\n\r\n    console.log('Connecting to IRYS devnet...');\r\n    \r\n    // Connect to IRYS devnet (free uploads) using server wallet\r\n    const irysUploader = await Uploader(Ethereum)\r\n      .withWallet(process.env.IRYS_PRIVATE_KEY)\r\n      .withRpc(\"https://rpc.sepolia.dev\") // Sepolia RPC for devnet\r\n      .devnet();\r\n\r\n    console.log('Connected to IRYS devnet successfully');\r\n    console.log('Server wallet address:', irysUploader.address);\r\n\r\n    // Check balance (should work on devnet)\r\n    try {\r\n      const balance = await irysUploader.getLoadedBalance();\r\n      console.log('Current balance:', irysUploader.utils.fromAtomic(balance).toString());\r\n    } catch (e: any) {\r\n      console.log('Balance check failed:', e.message);\r\n    }\r\n\r\n    console.log('Uploading score data...');\r\n    \r\n    // Add signature verification to tags\r\n    const enhancedTags = [\r\n      ...tags,\r\n      { name: 'Signature', value: signature },\r\n      { name: 'SignedMessage', value: message },\r\n      { name: 'VerifiedBy', value: 'Server' }\r\n    ];\r\n    \r\n    const jsonData = JSON.stringify(data);\r\n    console.log('Data size:', jsonData.length, 'bytes');\r\n    \r\n    const receipt = await irysUploader.upload(jsonData, {\r\n      tags: enhancedTags\r\n    });\r\n\r\n    console.log('Upload successful! Transaction ID:', receipt.id);\r\n\r\n    // Also add to recent scores for immediate leaderboard display\r\n    try {\r\n      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/leaderboard`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ data, txId: receipt.id })\r\n      });\r\n      console.log('Score added to recent leaderboard');\r\n    } catch (e: any) {\r\n      console.log('Failed to add to leaderboard:', e.message);\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      success: true,\r\n      txHash: receipt.id,\r\n      message: 'Score published to IRYS devnet successfully!',\r\n      url: `https://gateway.irys.xyz/${receipt.id}`,\r\n      devnet: true,\r\n      verified: true,\r\n      note: 'User signature verified - data will be available for 60 days on devnet'\r\n    });\r\n\r\n  } catch (err: any) {\r\n    console.error('IRYS upload error:', err);\r\n    \r\n    return NextResponse.json({ \r\n      success: false,\r\n      error: err.message,\r\n      details: err.toString()\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  return NextResponse.json({ \r\n    message: 'IRYS devnet upload endpoint with signature verification',\r\n    status: 'ready',\r\n    network: 'devnet',\r\n    note: 'Requires user signature - Free uploads up to 100KB, data expires after 60 days'\r\n  });\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}